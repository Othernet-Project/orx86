#!/bin/bash

set -e

OUT=config.in

OUTPUT_DIR=$1
OUTPUT_DIR=${OUTPUT_DIR:=/var/spool/downloads}

echo "# This file was generated by config script" > "$OUT"


writeconf() {
    echo $* >> "$OUT"
}

abort() {
    msg=$1
    echo "ABORTING: $msg"
    rm $OUT
    exit 1
}

writeconf "OUTPUT_DIR = ${OUTPUT_DIR}"
echo "Using ${OUTPUT_DIR} for downloads"

# Check init style
if [ -d /etc/init ] && [ -n $(which service 2>/dev/null) ]
then
    writeconf "INIT = upstart"
    writeconf "INIT_PREFIX = /etc/init"
    writeconf "INIT_EXT = .conf"
    echo "Using upstart"
elif [ -d /etc/systemd ] && [ -n $(which systemctl 2>/dev/null) ]
then
    writeconf "INIT = systemd"
    writeconf "INIT_PREFIX = /etc/systemd/system"
    writeconf "INIT_EXT = .service"
    echo "Using systemd"
else
    writeconf "INIT = init"
    writeconf "INIT_PREFIX = /etc/init.d"
    writeconf "INIT_EXT ="
    echo "Using sysvinit"
fi

# Check packaging system
if [ -n "$(which apt-get 2>/dev/null)" ]
then
    writeconf "PKG_COMMAND = DEBIAN_FRONTEND=noninteractive apt-get install -q -y"
    writeconf "PKG_LIST = python-pip libev-dev sqlite3 build-essential python-dev"
    echo "Using apt-get"
elif [ -n "$(which pacman 2>/dev/null)" ]
then
    writeconf "PKG_COMMAND = pacman -S --noconfirm"
    writeconf "PKG_LIST = python2-pip libev sqlite3 base-devel"
    echo "Using pacman"
else
    writeconf "PKG_COMMAND ="
    writeconf "PKG_LIST ="
    echo "No package manager found, installing Librarian is not possible"
fi

# Check location of syslog
if [ -f /var/log/syslog ]
then
    writeconf "SYSLOG = /var/log/syslog"
    echo "Using /var/log/syslog"
elif [ -f /var/log/messages ]
then
    writeconf "SYSLOG = /var/log/messages"
    echo "Using /var/log/messages"
else
    writeconf "SYSLOG ="
    echo "Not using syslog"
fi

# Check Python
if [ -z "$(which python2 2>/dev/null)" ]
then
    abort "Python 2 not found"
fi

# Get site-packages location
sp=$(python2 -c 'import site; print(site.getsitepackages()[0])')
writeconf "SITE_PACKAGES = $sp"
echo "Using site packages directory $sp"

# Check platform
pl=$(uname -m)
writeconf "PLATFORM = $pl"
echo "Using platform $pl"

cat $OUT Makefile.in > Makefile
rm $OUT
echo "Created Makefile"

echo
echo 'You may now type `make` to start the installation.'
